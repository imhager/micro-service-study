# 构建高可用注册中心
# 启动方式（打开两个cmd窗口，然后各自执行一条，等两个节点都正常启动后，会提示阶段UP状态）
# java -jar micro-service-registry-0.0.1-SNAPSHOT.jar --spring.profiles.active=registry-center-cluster-001
# java -jar micro-service-registry-0.0.1-SNAPSHOT.jar --spring.profiles.active=registry-center-cluster-002

# 公共配置
spring:
  application:
    name: registry-center-cluster

---
spring:
# 指定profile=registry-center-cluster-001
  profiles: registry-center-cluster-001

# 第一个节点配置
#      通过指定 spring.profiles.active=registry-center-cluster-001 来启动第一个节点
# 比如 java -jar micro-service-registry-0.0.1-SNAPSHOT.jar --spring.profiles.active=registry-center-cluster-001

server:
  port: 8761

eureka:
  instance:
    hostname: registry-center-cluster-001
  client:
    service-url:
      defaultZone: http://hager:12345@registry-center-cluster-002:8762/eureka/

# 启用注册中心服务认证控制，并设置账户密码，此时使用到该eureka server地址的地方，需要更改为
# http://{username}:{password}@registry-center-cluster-001:8761/eureka/
security:
  basic:
    enabled: true
  user:
    name: hager
    password: 123456

##    默认为true
#    fetch-registry: true
#    register-with-eureka: true

# 是否启动自我保护模式，所谓自我保护模式是指，出现网络分区、eureka在短时间内丢失过多客户端时，
# 会进入自我保护模式，即一个服务长时间没有发送心跳，eureka也不会将其删除。默认为true
# 自我保护机制。Eureka Server在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%，如果出现低于的情况（在单机调试的时候很容易满足，实际在生产环境上通常是由于网络不稳定导致），Eureka Server会将当前的实例注册信息保护起来，同时提示这个警告。
#  server:
#    enable-self-preservation: false


---

spring:
  profiles: registry-center-cluster-002

# 第二个节点配置
#      通过指定 spring.profiles.active=registry-center-cluster-002 来启动第二个节点
# 比如 java -jar micro-service-registry-0.0.1-SNAPSHOT.jar --spring.profiles.active=registry-center-cluster-002

server:
  port: 8762

eureka:
  instance:
    hostname: registry-center-cluster-002
  client:
    service-url:
      defaultZone: http://hager:123456@registry-center-cluster-001:8761/eureka/

# 启用注册中心服务认证控制，并设置账户密码，此时使用到该eureka server地址的地方，需要更改为
# http://{username}:{password}@registry-center-cluster-001:8761/eureka/
security:
  basic:
    enabled: true
  user:
    name: hager
    password: 12345